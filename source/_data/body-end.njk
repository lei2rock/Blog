{### 锚点定位 ###}
{% if page.comments or post.comments %}
<script{{ pjax }} type="text/javascript">
  if (window.location.hash) {
    var checkExist = setInterval(function () {
      if ($(window.location.hash).length) {
        $('html, body').animate({
          scrollTop: $(window.location.hash).offset().top - 90
        }, 1000);
        clearInterval(checkExist);
      }
    }, 100);
  }
</script>
{% endif %}

{### 友链生成 ###}
<script{{ pjax }} type="text/javascript">
  //jquery selector
  var $linkLists = $("[name='linklist']");
  if($linkLists.length != 0){
    var j = -1;
    for	(var i = 0; i < $linkLists.length; i++) {
      var listPath = $linkLists[i].getAttribute('src');
      //使用 getJSON 读取 JSON 文件中的数据
      $.getJSON(listPath, function(data) {
        j++;
        //存储数据的变量 
        var li = "";
        //清空内容 
        $linkLists.eq(j).empty();
        //将获取到的 json 格式数据遍历到 div 中
        $.each(data, function(infoIndex, info) {
          if(info['label']) { 
            info['label'] = '<span class="label">' + info['label'] + '</span>';
          } else {
            info['label'] = "";
          }
          li += '<div class="favlink-grid-container">';
          li += '<img class="favlink-grid-image" src="' + info['logo'] + '">';
          li += '<p>' + info['title'] + info['label'] + '</p>';
          li += '<p>' + info['intro'] + '</p>';
          li += '<a href="' + info['url'] + '" rel="noopener" target="_blank" data-pjax-state=""></a>';
          li += '</div>';
        })
        //显示处理后的数据 
        $linkLists.eq(j).html(li);
      })
    }
  }
</script>

{### Minigrid JS https://cdn.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js ###}
<script{{ pjax }} type="text/javascript">
!function(t, e) {
	"function" == typeof define && define.amd ? define(e) : "object" == typeof exports ? module.exports = e() : t.Minigrid = e()
}(this, function(t) {
	"use strict";
	function e(t, e) {
		for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
		return t
	}
	var i = function(t) {
			var i = t.container instanceof Node ? t.container : document.querySelector(t.container),
				r = t.item instanceof NodeList ? t.item : i.querySelectorAll(t.item);
			this.props = e(t, {
				container: i,
				nodeList: r
			})
		};
	return i.prototype.mount = function() {
		if (!this.props.container) return !1;
		if (!this.props.nodeList || 0 === this.props.nodeList.length) return !1;
		var t = "number" == typeof this.props.gutter && isFinite(this.props.gutter) && Math.floor(this.props.gutter) === this.props.gutter ? this.props.gutter : 0,
			e = this.props.done,
			i = this.props.container,
			r = this.props.nodeList;
		i.style.width = "";
		var n = Array.prototype.forEach,
			o = i.getBoundingClientRect().width,
			s = r[0].getBoundingClientRect().width + t,
			p = Math.max(Math.floor((o - t) / s), 1),
			a = 0;
		o = s * p + t + "px", i.style.width = o, i.style.position = "relative";
		for (var c = [], u = [], l = 0; l < p; ++l) u.push(l * s + t), c.push(t);
		this.props.rtl && u.reverse(), n.call(r, function(e) {
			var i = c.slice(0).sort(function(t, e) {
				return t - e
			}).shift();
			i = c.indexOf(i);
			var r = parseInt(u[i]),
				n = parseInt(c[i]);
			e.style.position = "absolute", e.style.webkitBackfaceVisibility = e.style.backfaceVisibility = "hidden", e.style.transformStyle = "preserve-3d", e.style.transform = "translate3D(" + r + "px," + n + "px, 0)", c[i] += e.getBoundingClientRect().height + t, a += 1
		}), i.style.display = "";
		var f = c.slice(0).sort(function(t, e) {
			return t - e
		}).pop();
		i.style.height = f + "px", "function" == typeof e && e(r)
	}, i
});
</script>

{### Photos Grid ###}
<script{{ pjax }} type="text/javascript">
var $album = $(".album")[0];
if($album) {
  // photos list path
  var imgDataPath = $album.getAttribute('src-json');
  // photos storage path
  var imgPath = $album.getAttribute('src-photo');
  // max photo number
  var imgMaxNum = 50;
  // window width (to decide photo width)
  var windowWidth = window.innerWidth
  || document.documentElement.clientWidth
  || document.body.clientWidth;
  if (windowWidth < 768) {
      var imageWidth = 145; // photo width (mobile)
  } else {
      var imageWidth = 235; // photo width
  }

  // Tencent Cloud imgage style (based on photo width)
  //var imgStyle = '!' + imageWidth + 'x';
  var imgStyle = '!300x';

  // generate photo grid
  var LinkDataPath = imgDataPath;
  photo = {
      page: 1,
      offset: imgMaxNum,
      init: function () {
          var that = this;
          $.getJSON(LinkDataPath, function (data) {
              that.render(that.page, data);
          });
      },
      render: function (page, data) {
          var begin = (page - 1) * this.offset;
          var end = page * this.offset;
          if (begin >= data.length) return;
          var imgNameWithPattern, imgName, imageSize, imageX, imageY, li = "";
          for (var i = begin; i < end && i < data.length; i++) {
              imgNameWithPattern = data[i].split(' ')[1];
              imgName = imgNameWithPattern.split('.')[0]
              imageSize = data[i].split(' ')[0];
              imageX = imageSize.split('.')[0];
              imageY = imageSize.split('.')[1];
              li += '<div class="card" style="width:' + imageWidth + 'px" >'
              li += '<div class="album-photo" style="height:'+ imageWidth * imageY / imageX + 'px">'
              li += '<a class="fancybox fancybox.image" href="' + imgPath + imgNameWithPattern + '" itemscope="" itemtype="http://schema.org/ImageObject" itemprop="url" data-fancybox="group" rel="group" data-caption="' + imgName + '" title="' +  imgName + '">'
              li += '<img data-src="' + imgPath + imgNameWithPattern + imgStyle + '" src="' + imgPath + imgNameWithPattern + imgStyle + '" alt="' +  imgName + '" data-loaded="true">'
              li += '</a>'
              li += '</div>'
              li += '</div>'
          }
          $(".album").append(li);
          this.minigrid();
      },

      minigrid: function() {
        var grid = new Minigrid({
            container: '.album',
            item: '.card',
            gutter: 12
        });
        grid.mount();
        $(window).resize(function() {
            grid.mount();
        });
      }
  }
  photo.init();
}
</script>
